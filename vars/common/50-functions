#!/bin/sh

###############################################################################
## Kerberos / LDAP related functions.
##
## These functions allow the $boxconf_user to obtain Kerberos credential caches
## and perform LDAP queries.
##
## - $boxconf_user, $boxconf_password, and $realm must be set.
## - Only Heimdal KRB5 is supported.
## - Appropriate krb5.conf and ldap.conf must exist on the host.
###############################################################################

boxconf_ccache='/tmp/krb5cc_boxconf'
boxconf_test_ccache='/tmp/krb5cc_boxconf_test'

BOXCONF_CLEANUP_PATHS="${BOXCONF_CLEANUP_PATHS} ${boxconf_ccache} ${boxconf_test_ccache}"

boxconf_kinit(){
  if ! klist -c "$boxconf_ccache" -t; then
    printf '%s' "$boxconf_password" \
      | kinit -c "$boxconf_ccache" --password-file=STDIN "${boxconf_user}@${realm}"
  fi
  [ $# -eq 0 ] || KRB5CCNAME=$boxconf_ccache "$@"
}

get_keytab(){
  # $1 = keytab, $2..$n = princ
  _gkt_owner=0
  _gkt_group=0
  _gkt_mode=600

  while getopts m:o:g: _gkt_opt; do
    case $_gkt_opt in
      m) _gkt_mode=$OPTARG ;;
      o) _gkt_owner=$OPTARG ;;
      g) _gkt_group=$OPTARG ;;
    esac
  done
  shift $((OPTIND - 1))

  _gkt_keytab=$1; shift

  # Set permissions on the keytab file.
  if [ -f "$_gkt_keytab" ]; then
    chmod "$_gkt_mode" "$_gkt_keytab"
    chown "$_gkt_owner" "$_gkt_keytab"
    chgrp "$_gkt_group" "$_gkt_keytab"
  else
    install -Cv -m "$_gkt_mode" -o "$_gkt_owner" -g "$_gkt_group" /dev/null "$_gkt_keytab"
  fi

  # Acquire kadmin service ticket.
  printf '%s' "$boxconf_password" \
    | kinit -c "$boxconf_ccache" -S "kadmin/admin@${realm}" --password-file=STDIN "${boxconf_user}@${realm}"

  # For each principal...
  while [ $# -gt 0 ]; do
    if ! kinit -c "$boxconf_test_ccache" -t "$_gkt_keytab" "$1" true; then
      # If unable to kinit, reset the keys and store them in the keytab.
      KRB5CCNAME="$boxconf_ccache" ktutil -v -k "$_gkt_keytab" get -p "${boxconf_user}@${realm}" "${1}@${realm}"
    fi
    shift
  done
}

boxconf_kadmin(){
  printf '%s' "$boxconf_password" \
    | boxconf_kinit -c "$boxconf_ccache" -S "kadmin/admin@${realm}" --password-file=STDIN "${boxconf_user}@${realm}" \
      && KRB5CCNAME="$boxconf_ccache" kadmin -r "$realm" -p "${boxconf_user}@${realm}" "$@"
}

ldap_search(){
  boxconf_kinit && KRB5CCNAME="$boxconf_ccache" ldapsearch -QLLL "$@"
}

ldap_add(){
  _ldapa_dn=$1; shift
  boxconf_kinit \
    && KRB5CCNAME="$boxconf_ccache" ldapsearch -QLLL -s base -b "$_ldapa_dn" dn > /dev/null 2>&1 \
    || { printf 'dn: %s\n' "$_ldapa_dn"; cat; } | KRB5CCNAME="$boxconf_ccache" ldapadd -Q "$@"
}

ldap_modify(){
  _ldapm_dn=$1; shift
  boxconf_kinit \
    && { printf 'dn: %s\nchangetype: modify\n' "$_ldapm_dn"; cat; } \
      | KRB5CCNAME="$boxconf_ccache" ldapmodify -Q "$@"
}

ldap_delete(){
  boxconf_kinit && KRB5CCNAME="$boxconf_ccache" ldapdelete -Q "$@"
}

ldap_ensure_attribute(){
  # $1 = dn, $2 = attribute, $3 = value
  ldap_search -b "$1" -s base "(${2}=${3})" dn | grep '^dn:' \
    || ldap_modify "$1" <<EOF
add: ${2}
${2}: ${3}
EOF
}

boxconf_psql(){
  boxconf_kinit && KRB5CCNAME="$boxconf_ccache" psql \
    --no-align                                       \
    --echo-all                                       \
    --tuples-only                                    \
    --no-password                                    \
    --username="$boxconf_user"                       \
    "$@"
}
create_postgres_user(){
  # $1 = postgres_host, $2 = username
  cat <<EOF | boxconf_psql -h "${1}" -d postgres
SELECT 'CREATE ROLE "${2}" WITH LOGIN' WHERE NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '${2}')\\gexec
EOF
}

create_postgres_db(){
  # $1 = postgres_host, $2 = dbname
  cat <<EOF | boxconf_psql -h "${1}" -d postgres
SELECT 'CREATE DATABASE "${2}"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${2}')\\gexec
EOF
}

create_robot(){
  unset _crb_comment _crb_homedir _crb_shell _crb_uid

  while getopts c:d:s:u:g: _crb_opt; do
    case $_crb_opt in
      c) _crb_comment=$OPTARG ;;
      d) _crb_homedir=$OPTARG ;;
      s) _crb_shell=$OPTARG ;;
      u) _crb_uid=$OPTARG ;;
    esac
  done
  shift $((OPTIND - 1))

  _crb_name=$1; shift

  ldap_add "cn=${_crb_name},${private_groups_basedn}" <<EOF
objectClass: groupOfMembers
objectClass: posixGroup
cn: ${_crb_name}
gidNumber: ${_crb_uid}
member: uid=${_crb_name},${robots_basedn}
EOF

  ldap_add "uid=${_crb_name},${robots_basedn}" <<EOF
objectClass: account
objectClass: posixAccount
objectClass: krb5KDCEntry
uid: ${_crb_name}
cn: ${_crb_comment:-${_crb_name}}
uidNumber: ${_crb_uid}
gidNumber: ${_crb_uid}
homeDirectory: ${_crb_homedir:-/nonexistent}
loginShell: ${_crb_shell:-/sbin/nologin}
gecos: ${_crb_comment:-${_crb_name}}
userPassword: {SASL}${_crb_name}@${realm}
krb5PrincipalName: ${_crb_name}@${realm}
krb5KeyVersionNumber: 0
krb5MaxLife: ${krb5_max_ticket_lifetime}
krb5MaxRenew: ${krb5_max_renew_lifetime}
krb5KDCFlags: ${krb5_default_princ_flags}
EOF
}

create_group(){
  unset _cg_email _cg_gid
  while getopts e:g: _cg_opt; do
    case $_cg_opt in
      e) _cg_email=$OPTARG ;;
      g) _cg_gid=$OPTARG ;;
    esac
  done
  shift $((OPTIND - 1))

  _cg_name=$1; shift

  if [ -n "${_cg_email:-}" ]; then
    ldap_add "cn=${_cg_name},${groups_basedn}" <<EOF
objectClass: groupOfMembers
objectClass: posixGroup
objectClass: mailRecipient
cn: ${_cg_name}
gidNumber: ${_cg_gid}
mailAddress: ${_cg_email}
mail: ${_cg_email}
EOF
  else
    ldap_add "cn=${_cg_name},${groups_basedn}" <<EOF
objectClass: groupOfMembers
objectClass: posixGroup
cn: ${_cg_name}
gidNumber: ${_cg_gid}
EOF
  fi
}

create_role(){
  unset _crl_gid
  while getopts g: _crl_opt; do
    case $_cg_opt in
      g) _crl=$OPTARG ;;
    esac
  done
  shift $((OPTIND - 1))

  _crl_name=$1; shift

  if [ -n "${_crl_gid:-}" ]; then
    ldap_add "cn=${_crl_name},${roles_basedn}" <<EOF
objectClass: groupOfMembers
objectClass: posixGroup
cn: ${_crl_name}
gidNumber: ${_crl_gid}
EOF
  else
    ldap_add "cn=${_crl_name},${roles_basedn}" <<EOF
objectClass: groupOfMembers
cn: ${_crl_name}
EOF
  fi
}

create_service(){
  while [ $# -gt 0 ]; do
    ldap_add "cn=${1},${services_basedn}" <<EOF
objectClass: applicationProcess
objectClass: krb5Principal
objectClass: krb5KDCEntry
cn: ${1}
krb5PrincipalName: ${1}@${realm}
krb5KeyVersionNumber: 0
krb5KDCFlags: ${krb5_default_princ_flags}
krb5MaxLife: ${krb5_max_ticket_lifetime}
krb5MaxRenew: ${krb5_max_renew_lifetime}
EOF
    shift
  done
}
